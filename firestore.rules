rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAuthor(authorId) {
      return isAuth() && request.auth.uid == authorId;
    }

    match /users/{userId}/profile/data {
      allow read: if isAuth();
      allow create, delete: if isOwner(userId);
      allow update: if isOwner(userId)
                    || (isAuth() && 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stats'])
                    );
    }

    match /users/{userId}/bookmarks/{postId} {
      allow read, write: if isOwner(userId);
    }

    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow create: if isAuth() && request.resource.data.recipientId == userId;
      allow update, delete: if isOwner(userId);
    }

    match /users/{userId}/followers/{followerId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.resource.data.followerId == request.auth.uid;
      allow delete: if isAuth() && resource.data.followerId == request.auth.uid;
    }

    match /users/{userId}/following/{followingId} {
      allow read: if isAuth();
      allow create, delete: if isOwner(userId);
    }

    // Catch-all for other user subcollections
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    match /verificationCodes/{email} {
      allow read, write: if true;
    }

    match /posts/{postId} {
      allow read: if isAuth();
      allow create: if isAuth()
                    && request.resource.data.authorId == request.auth.uid
                    && request.resource.data.keys().hasAll(['content', 'authorId', 'authorName', 'visibility'])
                    && request.resource.data.visibility in ['public', 'followers', 'private'];
      allow update: if isAuth() && (
        isAuthor(resource.data.authorId)
        || (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'commentCount', 'repostCount', 'replyCount'])
        )
      );
      allow delete: if isAuthor(resource.data.authorId);

      match /likes/{likeId} {
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }

      match /comments/{commentId} {
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow update: if isAuth() && resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }

      match /reposts/{repostId} {
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }
    }

    match /recipes/{recipeId} {
      allow read: if resource.data.visibility == 'public'
                  || (isAuth() && resource.data.visibility == 'followers')
                  || (isAuthor(resource.data.authorId));
      allow create: if isAuth() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isAuthor(resource.data.authorId);

      match /comments/{commentId} {
        allow read: if get(/databases/$(database)/documents/recipes/$(recipeId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }

      match /likes/{likeId} {
        allow read: if get(/databases/$(database)/documents/recipes/$(recipeId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }
    }

    match /rankings/posts {
      allow read: if true;
      allow write: if false;
    }

    match /rankings/recipes {
      allow read: if true;
      allow write: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}