rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAuthor(authorId) {
      return isAuth() && request.auth.uid == authorId;
    }

    match /users/{userId}/profile/data {
      allow read: if isAuth();
      allow create, delete: if isOwner(userId);
      allow update: if isOwner(userId)
                    || (isAuth() && 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stats'])
                    );
    }

    match /users/{userId}/bookmarks/{postId} {
      allow read, write: if isOwner(userId);
    }

    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow create: if isAuth() && request.resource.data.recipientId == userId;
      allow update, delete: if isOwner(userId);
    }

    

    match /users/{userId}/friends/{friendId} {
      // 読み取り: 認証済みユーザーは自分のフレンドリストを読み取り可能
      allow read: if isOwner(userId);

      // 作成:
      // - 認証済みユーザーであること
      // - 自分のUIDがuserIdと一致すること
      // - request.resource.data.uid が friendId と一致すること
      // - status が 'pending_sent' または 'pending_received' であること
      // - initiatedBy が request.auth.uid と一致すること
      allow create: if isOwner(userId)
                    && request.resource.data.uid == friendId
                    && request.resource.data.status in ['pending_sent', 'pending_received']
                    && request.resource.data.initiatedBy == request.auth.uid;

      // 更新:
      // - 認証済みユーザーであること
      // - 自分のUIDがuserIdと一致すること
      // - status の変更が 'pending_received' -> 'accepted' または 'pending_sent' -> 'accepted' であること
      // - initiatedBy は変更不可
      allow update: if isOwner(userId)
                    && request.resource.data.uid == friendId
                    && (
                      (resource.data.status == 'pending_received' && request.resource.data.status == 'accepted') ||
                      (resource.data.status == 'pending_sent' && request.resource.data.status == 'accepted')
                    )
                    && request.resource.data.initiatedBy == resource.data.initiatedBy; // initiatedByは変更不可

      // 削除: 認証済みユーザーは自分のフレンドリストから削除可能
      allow delete: if isOwner(userId);
    }

    // Catch-all for other user subcollections
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    match /verificationCodes/{email} {
      allow read, write: if true;
    }

    match /posts/{postId} {
      allow read: if isAuth();
      allow create: if isAuth()
                    && request.resource.data.authorId == request.auth.uid
                    && request.resource.data.keys().hasAll(['content', 'authorId', 'authorName', 'visibility'])
                    && request.resource.data.visibility in ['public', 'followers', 'private'];
      allow update: if isAuth() && (
        isAuthor(resource.data.authorId)
        || (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'commentCount', 'repostCount', 'replyCount'])
        )
      );
      allow delete: if isAuthor(resource.data.authorId);

      match /likes/{likeId} {
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }

      match /comments/{commentId} {
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow update: if isAuth() && resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }

      match /reposts/{repostId} {
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }
    }

    match /recipes/{recipeId} {
      allow read: if resource.data.visibility == 'public'
                  || (isAuth() && resource.data.visibility == 'followers')
                  || (isAuthor(resource.data.authorId));
      allow create: if isAuth() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isAuthor(resource.data.authorId);

      match /comments/{commentId} {
        allow read: if get(/databases/$(database)/documents/recipes/$(recipeId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }

      match /likes/{likeId} {
        allow read: if get(/databases/$(database)/documents/recipes/$(recipeId)).data.visibility == 'public' || isAuth();
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuth() && resource.data.userId == request.auth.uid;
      }
    }

    match /rankings/posts {
      allow read: if true;
      allow write: if false;
    }

    match /rankings/recipes {
      allow read: if true;
      allow write: if false;
    }

    match /conversations/{conversationId} {
      // Helper function to check if the current user is a participant
      function isParticipant() {
        return isAuth() && request.auth.uid in resource.data.participants;
      }

      // Read: Only participants can read the conversation
      allow read: if isParticipant();

      // Create: Authenticated users can create a conversation
      // Ensure participants array has exactly 2 UIDs and includes the creator
      allow create: if isAuth()
                    && request.resource.data.participants is list
                    && request.resource.data.participants.size() == 2
                    && request.auth.uid in request.resource.data.participants;

      // Update: Only participants can update lastMessage and lastMessageTimestamp
      allow update: if isParticipant()
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessage', 'lastMessageTimestamp']);

      // Delete: Not allowed (conversations persist)
      allow delete: if false;

      match /messages/{messageId} {
        // Read: Only participants of the parent conversation can read messages
        allow read: if isParticipant();

        // Create: Only participants of the parent conversation can send messages
        // Ensure senderId matches the authenticated user
        allow create: if isParticipant()
                      && request.resource.data.senderId == request.auth.uid;

        // Update: Only the sender can mark their own message as read
        allow update: if isParticipant()
                      && request.resource.data.senderId == request.auth.uid
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);

        // Delete: Not allowed (messages persist)
        allow delete: if false;
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}