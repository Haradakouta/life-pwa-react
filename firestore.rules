rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ========================================
    // 認証ユーティリティ関数
    // ========================================
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAuthor(authorId) {
      return isAuth() && request.auth.uid == authorId;
    }

    // ========================================
    // パート1: ユーザーデータ（プロフィール、設定）
    // ========================================

    // ========================================
    // ユーザープロフィール（読み取り専用）
    // ========================================
    // 認証済みユーザーは全ユーザーのプロフィールを読み取り可能（username重複チェック等に必要）
    match /users/{userId}/profile/data {
      allow read: if isAuth();
      allow write: if isOwner(userId);
    }

    // ========================================
    // ユーザー個人データ
    // ========================================
    // ユーザーは自分のデータのみアクセス可能
    // 対象: settings, intakes, expenses, stocks, shopping, recipes など
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    // ========================================
    // パート2: 認証関連
    // ========================================

    // メール確認コード（未認証ユーザーも読み書き可能、Cloud Functionsで期限管理）
    match /verificationCodes/{email} {
      allow read, write: if true;
    }

    // ========================================
    // パート3: ソーシャル投稿（posts）
    // ========================================

    match /posts/{postId} {
      // 読み取り: 公開投稿は誰でも、followers投稿は認証済みユーザー、プライベートは作成者のみ
      allow read: if resource.data.visibility == 'public'
                  || (isAuth() && resource.data.visibility == 'followers')
                  || (isAuthor(resource.data.authorId));

      // 作成: 認証済みユーザー、かつ自分のuidをauthorIdに設定
      allow create: if isAuth()
                    && request.resource.data.authorId == request.auth.uid;

      // 更新・削除: 自分の投稿のみ
      allow update, delete: if isAuthor(resource.data.authorId);

      // ---- 投稿のいいね（likes）サブコレクション ----
      match /likes/{likeId} {
        // 読み取り: 公開投稿のいいねは誰でも、followers以上は認証ユーザー
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.visibility == 'public'
                    || isAuth();

        // 作成: 認証済みユーザーのみ、かつ自分のuidをuserIdに設定
        allow create: if isAuth()
                      && request.resource.data.userId == request.auth.uid;

        // 削除: 自分のいいねのみ削除可能
        allow delete: if isAuth()
                      && resource.data.userId == request.auth.uid;
      }

      // ---- 投稿のコメント（comments）サブコレクション ----
      match /comments/{commentId} {
        // 読み取り: 公開投稿のコメントは誰でも、followers以上は認証ユーザー
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.visibility == 'public'
                    || isAuth();

        // 作成: 認証済みユーザーのみ、かつ自分のuidをuserIdに設定
        allow create: if isAuth()
                      && request.resource.data.userId == request.auth.uid;

        // 更新: 自分のコメントのみ更新可能
        allow update: if isAuth()
                      && resource.data.userId == request.auth.uid;

        // 削除: 自分のコメントのみ削除可能
        allow delete: if isAuth()
                      && resource.data.userId == request.auth.uid;
      }

      // ---- 投稿のリポスト（reposts）サブコレクション ----
      match /reposts/{repostId} {
        // 読み取り: 公開投稿のリポストは誰でも、followers以上は認証ユーザー
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.visibility == 'public'
                    || isAuth();

        // 作成: 認証済みユーザーのみ、かつ自分のuidをuserIdに設定
        allow create: if isAuth()
                      && request.resource.data.userId == request.auth.uid;

        // 削除: 自分のリポストのみ削除可能
        allow delete: if isAuth()
                      && resource.data.userId == request.auth.uid;
      }

      // ---- 投稿のブックマーク（bookmarks）サブコレクション ----
      match /bookmarks/{bookmarkId} {
        // 読み取り: 認証済みユーザーのみ（自分のブックマークのみ）
        allow read: if isAuth()
                    && resource.data.userId == request.auth.uid;

        // 作成: 認証済みユーザーのみ、かつ自分のuidをuserIdに設定
        allow create: if isAuth()
                      && request.resource.data.userId == request.auth.uid;

        // 削除: 自分のブックマークのみ削除可能
        allow delete: if isAuth()
                      && resource.data.userId == request.auth.uid;
      }
    }

    // ========================================
    // パート4: フォロー機能
    // ========================================

    // ユーザーのフォロワー一覧: users/{userId}/followers/{followId}
    match /users/{userId}/followers/{followId} {
      // 読み取り: 認証済みユーザーのみ
      allow read: if isAuth();

      // 作成: 認証済みユーザーのみ
      allow create: if isAuth();

      // 削除: フォローしたユーザー本人のみ
      allow delete: if isAuth()
                    && resource.data.followerId == request.auth.uid;
    }

    // ========================================
    // パート5: レシピ共有機能
    // ========================================

    match /recipes/{recipeId} {
      // 読み取り: 公開レシピは誰でも、followers以上は認証ユーザー、プライベートは作成者のみ
      allow read: if resource.data.visibility == 'public'
                  || (isAuth() && resource.data.visibility == 'followers')
                  || (isAuthor(resource.data.authorId));

      // 作成: 認証済みユーザーのみ、かつ自分のuidをauthorIdに設定
      allow create: if isAuth()
                    && request.resource.data.authorId == request.auth.uid;

      // 更新・削除: 作成者のみ
      allow update, delete: if isAuthor(resource.data.authorId);

      // ---- レシピのコメント（comments）サブコレクション ----
      match /comments/{commentId} {
        // 読み取り: 公開レシピのコメントは誰でも、followers以上は認証ユーザー
        allow read: if get(/databases/$(database)/documents/recipes/$(recipeId)).data.visibility == 'public'
                    || isAuth();

        // 作成: 認証済みユーザーのみ、かつ自分のuidをuserIdに設定
        allow create: if isAuth()
                      && request.resource.data.userId == request.auth.uid;

        // 削除: 自分のコメントのみ削除可能
        allow delete: if isAuth()
                      && resource.data.userId == request.auth.uid;
      }

      // ---- レシピのいいね（likes）サブコレクション ----
      match /likes/{likeId} {
        // 読み取り: 公開レシピのいいねは誰でも、followers以上は認証ユーザー
        allow read: if get(/databases/$(database)/documents/recipes/$(recipeId)).data.visibility == 'public'
                    || isAuth();

        // 作成: 認証済みユーザーのみ、かつ自分のuidをuserIdに設定
        allow create: if isAuth()
                      && request.resource.data.userId == request.auth.uid;

        // 削除: 自分のいいねのみ削除可能
        allow delete: if isAuth()
                      && resource.data.userId == request.auth.uid;
      }
    }

    // ========================================
    // パート6: ランキング・集計データ
    // ========================================

    // 投稿ランキング（読み取り専用）
    match /rankings/posts {
      allow read: if true;
      allow write: if false;
    }

    // レシピランキング（読み取り専用）
    match /rankings/recipes {
      allow read: if true;
      allow write: if false;
    }

    // ========================================
    // デフォルト: セキュリティ第一
    // ========================================

    // その他のパスは全てアクセス不可
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
